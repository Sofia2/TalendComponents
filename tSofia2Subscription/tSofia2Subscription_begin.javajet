<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List 
    	java.util.Map		
	" 
%>
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();	
%>
<%
	boolean useExisistingConnection = "true".equals(ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__"));
 	if (useExisistingConnection){ 
		String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
%>
	com.indra.sofia2.ssap.kp.implementations.mqtt.KpMQTTClient kp_<%=cid%> =
		(com.indra.sofia2.ssap.kp.implementations.mqtt.KpMQTTClient) globalMap.get("kp_<%=connection%>");
	String sessionKey_<%=cid%> = (String) globalMap.get("sessionKey_<%=connection%>")	;

<% 	} else { %>
	<%@ include file="../tSofia2Template/join_template.javajet"%>
<% 	} %>

<%
	java.util.List<IMetadataColumn> columnList = null;
	java.util.List<IMetadataTable> metadatas = node.getMetadataList();
	if(metadatas != null && metadatas.size() > 0) {
		IMetadataTable metadata = metadatas.get(0);
		if(metadata != null) {
		    columnList = metadata.getListColumns();
		}
	}
	java.util.List< ? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
	if(columnList!=null && outgoingConns!=null && outgoingConns.size()>0) {
		for(IConnection outgoingConn : outgoingConns) {
			if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {

%>
	//Registra un listener para recibir notificaciones para las suscripciones	
	class QueueListener implements com.indra.sofia2.ssap.kp.Listener4SIBIndicationNotifications{
		
		private java.util.concurrent.ArrayBlockingQueue<String> cola;
		
		public QueueListener(java.util.concurrent.ArrayBlockingQueue<String> cola){
			this.cola = cola;
		}
		
		/**
		 * Metodo Invocado por el API cuando se recibe una notificacion de suscripciï¿½n desde el SIB
		 */
		@Override
		public void onIndication(String messageId, com.indra.sofia2.ssap.ssap.SSAPMessage ssapMessage) {
			com.indra.sofia2.ssap.ssap.body.SSAPBodyReturnMessage indicationMessage=
				com.indra.sofia2.ssap.ssap.body.SSAPBodyReturnMessage.fromJsonToSSAPBodyReturnMessage(ssapMessage.getBody());
			
			if(indicationMessage.isOk()){
				//Throws Exception if full
				cola.add(indicationMessage.getData());
			}
			
		}
	}
	<%
				String bufferSize = ElementParameterParser.getValue(node, "__BUFFER_SIZE__");	
	%>
	java.util.concurrent.ArrayBlockingQueue<String> cola_<%=cid%> = new java.util.concurrent.ArrayBlockingQueue<String>(<%=bufferSize%>);
	kp_<%=cid%>.addListener4SIBNotifications(new QueueListener(cola_<%=cid%>));
	
	//Construye un mensaje SSAP SUBSCRIBE
<%
				String ontology = ElementParameterParser.getValue(node, "__ONTOLOGY__");
				
				String subsType = ElementParameterParser.getValue(node, "__SUBSCRIPTION_TYPE__");

				String query = "\"\"";
				String queryType = "NATIVE";				
				if ("QUERY".equals(subsType)){
					query = ElementParameterParser.getValue(node, "__QUERY__");
					queryType = "SQLLIKE";
				}else if ("CEP".equals(subsType)){
					query = ElementParameterParser.getValue(node, "__CEP__");
					queryType = "CEP";
				}
				
				String refreshTime = ElementParameterParser.getValue(node, "__REFRESH_TIME__");
%>
	com.indra.sofia2.ssap.ssap.SSAPMessage msgSubscribe_<%=cid%> =
		com.indra.sofia2.ssap.kp.SSAPMessageGenerator.getInstance().generateSubscribeMessage(
			sessionKey_<%=cid%>
			, <%=ontology%>
			, <%=refreshTime%>
			, <%=query%>
			, com.indra.sofia2.ssap.ssap.SSAPQueryType.<%=queryType%>
		);
	
	//Envia el mensaje SUBSCRIBE al SIB
	com.indra.sofia2.ssap.ssap.SSAPMessage respSubscribe_<%=cid%> = kp_<%=cid%>.send(msgSubscribe_<%=cid%>);
	
	com.indra.sofia2.ssap.ssap.body.SSAPBodyReturnMessage responseSubscribeBody_<%=cid%> =
		com.indra.sofia2.ssap.ssap.body.SSAPBodyReturnMessage.fromJsonToSSAPBodyReturnMessage(respSubscribe_<%=cid%>.getBody());
		
	globalMap.put("idSubscription_<%=cid%>", responseSubscribeBody_<%=cid%>.getData());
	

	//Queda a la espera de recibir notificaciones
<%
				boolean run_infinite = "true".equals(ElementParameterParser.getValue(node, "__INFINITE_LOOP__"));
				if (run_infinite){
%>
	int cero_<%=cid%> = 0;
	while(cero_<%=cid%> > -1){ //Bucle infinito
		<%=outgoingConn.getName()%>.<%=columnList.get(0).getLabel()%> = cola_<%=cid%>.take();
<%
				}else{
					String execution_time = ElementParameterParser.getValue(node, "__LOOP_TIMEOUT__");
%>
	long endTime = new java.util.Date().getTime()+<%=execution_time%>*1000;
	for(long hora = new java.util.Date().getTime(); hora < endTime; hora = new java.util.Date().getTime()){
		try{
			<%=outgoingConn.getName()%>.<%=columnList.get(0).getLabel()%> = cola_<%=cid%>
				.poll(endTime - hora, java.util.concurrent.TimeUnit.MILLISECONDS);
		}catch(InterruptedException e_<%=cid%>){
			break;
		}
<%					
				}
			}
		}
	}
%>